/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SdCanvas {
        /**
          * Returns a reference to the canvas element
         */
        "getCanvas": () => Promise<HTMLCanvasElement>;
        /**
          * The height of the canvas. Defaults to `144`
         */
        "height": number;
        /**
          * The display label for the canvas
         */
        "label": string;
        /**
          * The width of the canvas. Defaults to `144`
         */
        "width": number;
    }
    interface SdDetails {
        /**
          * Closes the details element. Has no effect if the element is already closed
          * @returns Returns the new state of the element (true = open, false = closed)
         */
        "close": () => Promise<boolean>;
        /**
          * Whether to include the label in the rendered HTML
         */
        "includeLabel": boolean;
        /**
          * Whether the text should have margins on the text elements
         */
        "innerMargins": boolean;
        /**
          * The display label for the details element
         */
        "label": string;
        /**
          * Opens the details element. Has no effect if the element is already open
          * @returns Returns the new state of the element (true = open, false = closed)
         */
        "open": () => Promise<boolean>;
        /**
          * Whether the details element should initially be open (`true`) or closed (`false`). Defaults to `false`
         */
        "opened": boolean;
        /**
          * The summary message for the details element
         */
        "summary": string;
        /**
          * Toggles the open state of the details element, closing it if it is open and opening it if it is closed
          * @returns Returns the new state of the element (true = open, false = closed)
         */
        "toggle": () => Promise<boolean>;
    }
    interface SdHeader {
    }
    interface SdInput {
        /**
          * The hover text for the form entry
         */
        "altText": string;
        /**
          * The input mode to use for virtual keyboards
         */
        "inputmode"?: "none" | "text" | "decimal" | "numeric" | "tel" | "search" | "email" | "url";
        /**
          * The display label for the input
         */
        "label": string;
        /**
          * A validation regex for the input. Will show a checkmark next to the input when validated
         */
        "pattern"?: string;
        /**
          * The placeholder value for the input field
         */
        "placeholder"?: string;
        /**
          * Whether the input should be read only. Defaults to `false`
         */
        "readonly": boolean;
        /**
          * Whether or not the input is required. Defaults to `false`
         */
        "required"?: boolean;
        /**
          * The type for the input box. Defaults to `text`
         */
        "type"?: "email" | "number" | "password" | "search" | "tel" | "text" | "url";
        /**
          * A predefined value for the input
         */
        "value": string;
    }
    interface SdRoot {
    }
    interface SdTextarea {
        /**
          * The display label for the textarea
         */
        "label": string;
        /**
          * The maximum length of the content of the textarea
         */
        "maxlength": number;
        /**
          * The minimum length of the content of the textarea
         */
        "minlength": number;
        /**
          * The name of the textarea
         */
        "name"?: string;
        /**
          * The placeholder value for the input field
         */
        "placeholder"?: string;
        /**
          * Whether the textarea should be read only. Defaults to `false`
         */
        "readonly": boolean;
        /**
          * Whether or not the textarea is required. Defaults to `false`
         */
        "required": boolean;
        /**
          * A predefined value for the textarea
         */
        "value": string;
    }
}
declare global {
    interface HTMLSdCanvasElement extends Components.SdCanvas, HTMLStencilElement {
    }
    var HTMLSdCanvasElement: {
        prototype: HTMLSdCanvasElement;
        new (): HTMLSdCanvasElement;
    };
    interface HTMLSdDetailsElement extends Components.SdDetails, HTMLStencilElement {
    }
    var HTMLSdDetailsElement: {
        prototype: HTMLSdDetailsElement;
        new (): HTMLSdDetailsElement;
    };
    interface HTMLSdHeaderElement extends Components.SdHeader, HTMLStencilElement {
    }
    var HTMLSdHeaderElement: {
        prototype: HTMLSdHeaderElement;
        new (): HTMLSdHeaderElement;
    };
    interface HTMLSdInputElement extends Components.SdInput, HTMLStencilElement {
    }
    var HTMLSdInputElement: {
        prototype: HTMLSdInputElement;
        new (): HTMLSdInputElement;
    };
    interface HTMLSdRootElement extends Components.SdRoot, HTMLStencilElement {
    }
    var HTMLSdRootElement: {
        prototype: HTMLSdRootElement;
        new (): HTMLSdRootElement;
    };
    interface HTMLSdTextareaElement extends Components.SdTextarea, HTMLStencilElement {
    }
    var HTMLSdTextareaElement: {
        prototype: HTMLSdTextareaElement;
        new (): HTMLSdTextareaElement;
    };
    interface HTMLElementTagNameMap {
        "sd-canvas": HTMLSdCanvasElement;
        "sd-details": HTMLSdDetailsElement;
        "sd-header": HTMLSdHeaderElement;
        "sd-input": HTMLSdInputElement;
        "sd-root": HTMLSdRootElement;
        "sd-textarea": HTMLSdTextareaElement;
    }
}
declare namespace LocalJSX {
    interface SdCanvas {
        /**
          * The height of the canvas. Defaults to `144`
         */
        "height"?: number;
        /**
          * The display label for the canvas
         */
        "label"?: string;
        /**
          * The width of the canvas. Defaults to `144`
         */
        "width"?: number;
    }
    interface SdDetails {
        /**
          * Whether to include the label in the rendered HTML
         */
        "includeLabel"?: boolean;
        /**
          * Whether the text should have margins on the text elements
         */
        "innerMargins"?: boolean;
        /**
          * The display label for the details element
         */
        "label"?: string;
        /**
          * Emits an `openChanged` event whenever the details element is opened (true = open, false = closed)
         */
        "onOpenChanged"?: (event: CustomEvent<boolean>) => void;
        /**
          * Whether the details element should initially be open (`true`) or closed (`false`). Defaults to `false`
         */
        "opened"?: boolean;
        /**
          * The summary message for the details element
         */
        "summary"?: string;
    }
    interface SdHeader {
    }
    interface SdInput {
        /**
          * The hover text for the form entry
         */
        "altText"?: string;
        /**
          * The input mode to use for virtual keyboards
         */
        "inputmode"?: "none" | "text" | "decimal" | "numeric" | "tel" | "search" | "email" | "url";
        /**
          * The display label for the input
         */
        "label"?: string;
        /**
          * Emits a `changeUpdate` event whenever the input is changed. Fires after the input loses focus
         */
        "onChangeUpdate"?: (event: CustomEvent<string>) => void;
        /**
          * Emits a `inputUpdate` event whenever the input is changed. Fires every time something is typed into the input
         */
        "onInputUpdate"?: (event: CustomEvent<{data: string | null, inputType: string}>) => void;
        /**
          * A validation regex for the input. Will show a checkmark next to the input when validated
         */
        "pattern"?: string;
        /**
          * The placeholder value for the input field
         */
        "placeholder"?: string;
        /**
          * Whether the input should be read only. Defaults to `false`
         */
        "readonly"?: boolean;
        /**
          * Whether or not the input is required. Defaults to `false`
         */
        "required"?: boolean;
        /**
          * The type for the input box. Defaults to `text`
         */
        "type"?: "email" | "number" | "password" | "search" | "tel" | "text" | "url";
        /**
          * A predefined value for the input
         */
        "value"?: string;
    }
    interface SdRoot {
    }
    interface SdTextarea {
        /**
          * The display label for the textarea
         */
        "label"?: string;
        /**
          * The maximum length of the content of the textarea
         */
        "maxlength"?: number;
        /**
          * The minimum length of the content of the textarea
         */
        "minlength"?: number;
        /**
          * The name of the textarea
         */
        "name"?: string;
        /**
          * Emits a `changeUpdate` event whenever the textarea is changed. Fires after the textarea loses focus
         */
        "onChangeUpdate"?: (event: CustomEvent<string>) => void;
        /**
          * Emits a `inputUpdate` event whenever the textarea is changed. Fires every time something is typed into the textarea
         */
        "onInputUpdate"?: (event: CustomEvent<{data: string | null, inputType: string}>) => void;
        /**
          * The placeholder value for the input field
         */
        "placeholder"?: string;
        /**
          * Whether the textarea should be read only. Defaults to `false`
         */
        "readonly"?: boolean;
        /**
          * Whether or not the textarea is required. Defaults to `false`
         */
        "required"?: boolean;
        /**
          * A predefined value for the textarea
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "sd-canvas": SdCanvas;
        "sd-details": SdDetails;
        "sd-header": SdHeader;
        "sd-input": SdInput;
        "sd-root": SdRoot;
        "sd-textarea": SdTextarea;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sd-canvas": LocalJSX.SdCanvas & JSXBase.HTMLAttributes<HTMLSdCanvasElement>;
            "sd-details": LocalJSX.SdDetails & JSXBase.HTMLAttributes<HTMLSdDetailsElement>;
            "sd-header": LocalJSX.SdHeader & JSXBase.HTMLAttributes<HTMLSdHeaderElement>;
            "sd-input": LocalJSX.SdInput & JSXBase.HTMLAttributes<HTMLSdInputElement>;
            "sd-root": LocalJSX.SdRoot & JSXBase.HTMLAttributes<HTMLSdRootElement>;
            "sd-textarea": LocalJSX.SdTextarea & JSXBase.HTMLAttributes<HTMLSdTextareaElement>;
        }
    }
}
